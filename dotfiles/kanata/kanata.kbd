;; More easily spot misaligned keys/layers
;; vim: cursorcolumn

(defcfg
  process-unmapped-keys yes
  ;; Block keys outside the ideal keyboard size/limit, build muscle memory
  block-unmapped-keys yes
  log-layer-changes no
  ;; Don't crash if keyboard isn't connect on startup
  linux-continue-if-no-devs-found yes
)

;; Defines the order of keys that the `deflayer` entries below will operate on
;;
;; Good keyboards should be split, have a max of 6 columns, 4 rows and ~3 thumb 
;; keys per hand, to reduce movement from the home row ignore anything extra 
;; and try to map keys outside that limit into a layer
;;
;; Chop down a standard UK QWERTY keyboard to fit into that limit, all the
;; layers take this as their template.
(defsrc
  grv  1    2    3    4    5          6    7    8    9    0    -
  tab  q    w    e    r    t          y    u    i    o    p    [
  caps a    s    d    f    g          h    j    k    l    ;    '
  nubs z    x    c    v    b          n    m    ,    .    /    rsft
            lalt                spc                  ralt
)

;; First defined layer is the starting layer
(deflayer starting
  grv  1    2    3    4    5          6    7    8    9    0    -
  tab  q    w    e    r    t          y    u    i    o    p    del
  @vin @a   @s   @d   @f   g          h    @j   @k   @l   @scn @fun
  @oss z    x    c    v    b          n    m    ,    .    /    @cwr
            @nav                @sym                 @num
)

(defvar
  ;; tap-timeout
  tt 200
  ;; hold-timeout
  ht 230
)

(defalias
  ;; Home row mods - left hand
  a   (tap-hold $tt $ht a    lmet)
  s   (tap-hold $tt $ht s    lalt)
  d   (tap-hold $tt $ht d    lctl)
  f   (tap-hold $tt $ht f    lsft)

  ;; Home row mods - right hand
  j   (tap-hold $tt $ht j    rsft)
  k   (tap-hold $tt $ht k    rctl)
  l   (tap-hold $tt $ht l    lalt)
  scn (tap-hold $tt $ht scln lmet)

  ;; Move useful keys closer and add layers
  oss (one-shot-press 2000 lsft)
  sym (tap-hold $tt $ht spc  (layer-while-held symbols))
  num (tap-hold $tt $ht ret  (layer-while-held numbers))
  nav (tap-hold $tt $ht bspc (layer-while-held nav))
  fun (tap-hold $tt $ht '    (layer-while-held function))
  vin (tap-hold $tt $ht esc  (layer-while-held vim-nav))
  cwr (caps-word 10000)
  mos (tap-hold $tt $ht @oss (layer-while-held mouse))
)

(deflayer nav
  _    _    _    _    _    _          _    _    _    _    _    _
  _    _    _    _    _    _          _    _    _    _    _    _
  _    @osm @osa @osc @oss @osg       left down up   rght _    _
  _    _    _    _    _    _          home pgdn pgup end  _    _
            _                   _                    _
)

(deflayer numbers
  _    _    _    _    _    _          _    _    _    _    _    _
  _    _    7    8    9    _          _    _    _    _    _    _
  _    0    4    5    6    _          _    @oss @osc @osa @osm _
  _    _    1    2    3    _          _    _    _    _    _    _
            _                   _                    _
)

(defalias
  osm (one-shot-press 2000 lmet)
  osa (one-shot-press 2000 lalt)
  osc (one-shot-press 2000 lctl)
  osg (one-shot-press 2000 ralt)
)

(defvar
  rps S-0    ;; ) Right parenthesis
  exc S-1    ;; ! Exclamation mark
  dlr S-4    ;; $ Dollar
  per S-5    ;; % Percent
  crt S-6    ;; ^ Caret or circumflex
  amp S-7    ;; & Ampersand
  ask S-8    ;; * Asterisk
  lps S-9    ;; ( Left parenthesis
  pls S-=    ;; + Plus
  lbc S-[    ;; { Left curly bracket
  rbc S-]    ;; } Right curly bracket
  uds S--    ;; _ Underscore
  qtm S-/    ;; ? Question mark
  tld S-\    ;; Tilda
  vrb S-nubs ;; Vertical bar
  num bksl   ;; # Number sign - on US keyboards it's where backslash is
  dqm S-2    ;; Double quotation marks
  eur RA-4   ;; Euro
  gbp S-3    ;; £
  ats S-'    ;; @
  lst S-,    ;; <
  grt S-.    ;; >
  cln S-;    ;; :
  mns -      ;; Minus
)

;; Symbols in the home row are placed based on their action in Neovim, 
;; left/backward movement/operation symbols are on the left hand, right/forward 
;; movement/operation symbols are on the right
;; Other symbols are placed near their location on a default UK layout
(deflayer symbols
  _    _    _    _    _    _          _    _    _    _    _    _
  grv  $exc $dqm $gbp $eur $per       $crt $amp $mns eql  $pls $ats
  $qtm $num [    $lbc $lps $uds       $dlr $rps $rbc ]    $ask /
  nubs $vrb _    _    _    _          _    '    $lst $grt $cln $tld
            _                   _                    _
)

(deflayer function
  _    _    _    _    _    _          _    _    _    _    _    _
  _    f12  f7   f8   f9   _          _    _    _    _    prnt _
  _    f11  f4   f5   f6   _          _    vold volu mute _    _
  _    f10  f1   f2   f3   _          _    brdn bru  _    _    _
            _                   _                    _
)

(deflayer vim-nav
  _    _    _    _    _    _          _    _    _    _    _    _
  _    _    _    @pca @nca _          _    @phk @nhk _    _    _
  _    _    _    @prf @nrf _          _    @pdg @ndg _    _    _
  _    _    _    _    _    _          _    @pql @nql _    _    _
            _                   _                    _
)

(defalias
  pca (macro [ c)
  nca (macro ] c)
  prf (macro [ [)
  nrf (macro ] ])
  phk (macro [ h)
  nhk (macro ] h)
  pdg (macro [ d)
  ndg (macro ] d)
  pql (macro [ q)
  nql (macro ] q)
)

(deflayer mouse
  _    _    _    _    _    _          _    _    _    _    _    _
  _    _    _    _    _    _          mlft mmid mrgt _    _    _
  _    _    _    _    _    _          @ma← @ma↓ @ma↑ @ma→ _    _
  _    _    _    _    _    _          @mwl @mwd @mwu @mwr _    _
            _                   _                    _
)

(defalias
  ma← (movemouse-accel-left 5 1000 1 5)
  ma↓ (movemouse-accel-down 5 1000 1 5)
  ma↑ (movemouse-accel-up 5 1000 1 5)
  ma→ (movemouse-accel-right 5 1000 1 5)

  mwl (mwheel-left 50 120)
  mwd (mwheel-down 50 120)
  mwu (mwheel-up 50 120)
  mwr (mwheel-right 50 120)
)
